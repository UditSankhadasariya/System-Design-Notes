==> Sub-millisecond latency
Both Redis and Memcached support sub-millisecond response times. By storing data in-memory they can read data more quickly than disk based databases.

Developer ease of use
Both Redis and Memcached are syntactically easy to use and require a minimal amount of code to integrate into your application.

Data partitioning
Both Redis and Memcached allow you to distribute your data among multiple nodes. This allows you to scale out to better handle more data when demand grows.

Support for a broad set of programming languages
Both Redis and Memcached have many open-source clients available for developers. Supported languages include Java, Python, PHP, C, C++, C#, JavaScript, Node.js, Ruby, Go and many others.

Advanced data structures
In addition to strings, Redis supports lists, sets, sorted sets, hashes, bit arrays, and hyperloglogs. Applications can use these more advanced data structures to support a variety of use cases. For example, you can use Redis Sorted Sets to easily implement a game leaderboard that keeps a list of players sorted by their rank.

Multithreaded architecture
Since Memcached is multithreaded, it can make use of multiple processing cores. This means that you can handle more operations by scaling up compute capacity.

Snapshots
With Redis you can keep your data on disk with a point in time snapshot which can be used for archiving or recovery.

Replication
Redis lets you create multiple replicas of a Redis primary. This allows you to scale database reads and to have highly available clusters.

Transactions
Redis supports transactions which let you execute a group of commands as an isolated and atomic operation.

Pub/Sub
Redis supports Pub/Sub messaging with pattern matching which you can use for high performance chat rooms, real-time comment streams, social media feeds, and server intercommunication.

Lua scripting
Redis allows you to execute transactional Lua scripts. Scripts can help you boost performance and simplify your application.

Geospatial support
Redis has purpose-built commands for working with real-time geospatial data at scale. You can perform operations like finding the distance between two elements (for example people or places) and finding all elements within a given distance of a point.



==> Yes, both Redis and Memcached are horizontally scalable, meaning they can scale by adding more machines to a cluster as opposed to vertically scaling by adding more resources to a single machine. This is achieved by using techniques such as sharding and consistent hashing to distribute data across multiple machines. However, Redis supports more data structure and persistence options, in addition to its ability to scale horizontally, making it more versatile than Memcached.

==> In theory, both Redis and Memcached can be infinitely horizontally scalable, as they can add more machines to a cluster to handle increasing amounts of data and traffic. However, in practice, there are limits to how far horizontal scaling can take you. The scalability of a Redis or Memcached cluster will depend on various factors such as network latency, the number of keys, the amount of data being stored, and the rate of data writes and updates. Eventual consistency and CAP theorem also play a role in the scalability.

Also, as the cluster grows, it can become more difficult to manage and maintain, and the complexity of the system can increase. Additionally, as you add more machines, the network latency and the overhead of maintaining consistency across the cluster can also increase, which can lead to a decrease in performance.

So, while both Redis and Memcached can scale horizontally to a certain extent, there are practical limits to how large and how well a cluster can perform.

==> LRU is a good eviction policy. another policies which can be useful are LFU(least frequently used) and FIFO(basic queue)
